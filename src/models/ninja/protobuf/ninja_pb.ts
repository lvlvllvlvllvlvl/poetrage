// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file src/models/ninja/protobuf/ninja.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message SearchResult
 */
export class SearchResult extends Message<SearchResult> {
  /**
   * @generated from field: uint32 total = 1;
   */
  total = 0;

  /**
   * @generated from field: repeated SearchResultDimension dimensions = 2;
   */
  dimensions: SearchResultDimension[] = [];

  /**
   * @generated from field: repeated SearchResultIntegerDimension integer_dimensions = 3;
   */
  integerDimensions: SearchResultIntegerDimension[] = [];

  /**
   * @generated from field: repeated SearchResultPerformance performance_points = 4;
   */
  performancePoints: SearchResultPerformance[] = [];

  /**
   * @generated from field: repeated SearchResultValueList value_lists = 5;
   */
  valueLists: SearchResultValueList[] = [];

  /**
   * @generated from field: repeated SearchResultDictionaryReference dictionaries = 6;
   */
  dictionaries: SearchResultDictionaryReference[] = [];

  /**
   * @generated from field: repeated SearchResultField fields = 7;
   */
  fields: SearchResultField[] = [];

  /**
   * @generated from field: repeated SearchResultSection sections = 8;
   */
  sections: SearchResultSection[] = [];

  constructor(data?: PartialMessage<SearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "dimensions", kind: "message", T: SearchResultDimension, repeated: true },
    {
      no: 3,
      name: "integer_dimensions",
      kind: "message",
      T: SearchResultIntegerDimension,
      repeated: true,
    },
    {
      no: 4,
      name: "performance_points",
      kind: "message",
      T: SearchResultPerformance,
      repeated: true,
    },
    { no: 5, name: "value_lists", kind: "message", T: SearchResultValueList, repeated: true },
    {
      no: 6,
      name: "dictionaries",
      kind: "message",
      T: SearchResultDictionaryReference,
      repeated: true,
    },
    { no: 7, name: "fields", kind: "message", T: SearchResultField, repeated: true },
    { no: 8, name: "sections", kind: "message", T: SearchResultSection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResult {
    return new SearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResult {
    return new SearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResult {
    return new SearchResult().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResult | PlainMessage<SearchResult> | undefined,
    b: SearchResult | PlainMessage<SearchResult> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResult, a, b);
  }
}

/**
 * @generated from message SearchResultField
 */
export class SearchResultField extends Message<SearchResultField> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated string value_list_ids = 4;
   */
  valueListIds: string[] = [];

  /**
   * @generated from field: string sort_id = 5;
   */
  sortId = "";

  /**
   * @generated from field: string integer_dimension_id = 6;
   */
  integerDimensionId = "";

  /**
   * @generated from field: map<string, string> properties = 7;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SearchResultField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value_list_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "sort_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "integer_dimension_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 7,
      name: "properties",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResultField {
    return new SearchResultField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResultField {
    return new SearchResultField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResultField {
    return new SearchResultField().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultField | PlainMessage<SearchResultField> | undefined,
    b: SearchResultField | PlainMessage<SearchResultField> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultField, a, b);
  }
}

/**
 * @generated from message SearchResultSection
 */
export class SearchResultSection extends Message<SearchResultSection> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string dimension_id = 4;
   */
  dimensionId = "";

  /**
   * @generated from field: map<string, string> properties = 5;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SearchResultSection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultSection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dimension_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: "properties",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResultSection {
    return new SearchResultSection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResultSection {
    return new SearchResultSection().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultSection {
    return new SearchResultSection().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultSection | PlainMessage<SearchResultSection> | undefined,
    b: SearchResultSection | PlainMessage<SearchResultSection> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultSection, a, b);
  }
}

/**
 * @generated from message SearchResultDictionaryReference
 */
export class SearchResultDictionaryReference extends Message<SearchResultDictionaryReference> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string hash = 2;
   */
  hash = "";

  constructor(data?: PartialMessage<SearchResultDictionaryReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultDictionaryReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultDictionaryReference {
    return new SearchResultDictionaryReference().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDictionaryReference {
    return new SearchResultDictionaryReference().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDictionaryReference {
    return new SearchResultDictionaryReference().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultDictionaryReference | PlainMessage<SearchResultDictionaryReference> | undefined,
    b: SearchResultDictionaryReference | PlainMessage<SearchResultDictionaryReference> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultDictionaryReference, a, b);
  }
}

/**
 * @generated from message SearchResultDimension
 */
export class SearchResultDimension extends Message<SearchResultDimension> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string dictionary_id = 2;
   */
  dictionaryId = "";

  /**
   * @generated from field: repeated SearchResultDimensionCount counts = 3;
   */
  counts: SearchResultDimensionCount[] = [];

  constructor(data?: PartialMessage<SearchResultDimension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultDimension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dictionary_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "counts", kind: "message", T: SearchResultDimensionCount, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultDimension {
    return new SearchResultDimension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResultDimension {
    return new SearchResultDimension().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDimension {
    return new SearchResultDimension().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultDimension | PlainMessage<SearchResultDimension> | undefined,
    b: SearchResultDimension | PlainMessage<SearchResultDimension> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultDimension, a, b);
  }
}

/**
 * @generated from message SearchResultDimensionCount
 */
export class SearchResultDimensionCount extends Message<SearchResultDimensionCount> {
  /**
   * @generated from field: uint32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: uint32 count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<SearchResultDimensionCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultDimensionCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultDimensionCount {
    return new SearchResultDimensionCount().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDimensionCount {
    return new SearchResultDimensionCount().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDimensionCount {
    return new SearchResultDimensionCount().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultDimensionCount | PlainMessage<SearchResultDimensionCount> | undefined,
    b: SearchResultDimensionCount | PlainMessage<SearchResultDimensionCount> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultDimensionCount, a, b);
  }
}

/**
 * @generated from message SearchResultIntegerDimension
 */
export class SearchResultIntegerDimension extends Message<SearchResultIntegerDimension> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint32 min_value = 2;
   */
  minValue = 0;

  /**
   * @generated from field: uint32 max_value = 3;
   */
  maxValue = 0;

  constructor(data?: PartialMessage<SearchResultIntegerDimension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultIntegerDimension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "max_value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultIntegerDimension {
    return new SearchResultIntegerDimension().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchResultIntegerDimension {
    return new SearchResultIntegerDimension().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultIntegerDimension {
    return new SearchResultIntegerDimension().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultIntegerDimension | PlainMessage<SearchResultIntegerDimension> | undefined,
    b: SearchResultIntegerDimension | PlainMessage<SearchResultIntegerDimension> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultIntegerDimension, a, b);
  }
}

/**
 * @generated from message SearchResultPerformance
 */
export class SearchResultPerformance extends Message<SearchResultPerformance> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: double ms = 2;
   */
  ms = 0;

  constructor(data?: PartialMessage<SearchResultPerformance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultPerformance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ms", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultPerformance {
    return new SearchResultPerformance().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchResultPerformance {
    return new SearchResultPerformance().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultPerformance {
    return new SearchResultPerformance().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultPerformance | PlainMessage<SearchResultPerformance> | undefined,
    b: SearchResultPerformance | PlainMessage<SearchResultPerformance> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultPerformance, a, b);
  }
}

/**
 * @generated from message SearchResultValueList
 */
export class SearchResultValueList extends Message<SearchResultValueList> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated SearchResultValue values = 2;
   */
  values: SearchResultValue[] = [];

  constructor(data?: PartialMessage<SearchResultValueList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultValueList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "message", T: SearchResultValue, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultValueList {
    return new SearchResultValueList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResultValueList {
    return new SearchResultValueList().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultValueList {
    return new SearchResultValueList().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultValueList | PlainMessage<SearchResultValueList> | undefined,
    b: SearchResultValueList | PlainMessage<SearchResultValueList> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultValueList, a, b);
  }
}

/**
 * @generated from message SearchResultValue
 */
export class SearchResultValue extends Message<SearchResultValue> {
  /**
   * @generated from field: string str = 1;
   */
  str = "";

  /**
   * @generated from field: uint32 number = 2;
   */
  number = 0;

  /**
   * @generated from field: repeated uint32 numbers = 3;
   */
  numbers: number[] = [];

  /**
   * @generated from field: repeated string strs = 4;
   */
  strs: string[] = [];

  /**
   * @generated from field: bool boolean = 5;
   */
  boolean = false;

  constructor(data?: PartialMessage<SearchResultValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "str", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "numbers", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 4, name: "strs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "boolean", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResultValue {
    return new SearchResultValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResultValue {
    return new SearchResultValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResultValue {
    return new SearchResultValue().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultValue | PlainMessage<SearchResultValue> | undefined,
    b: SearchResultValue | PlainMessage<SearchResultValue> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultValue, a, b);
  }
}

/**
 * @generated from message SearchResultDictionary
 */
export class SearchResultDictionary extends Message<SearchResultDictionary> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated string values = 2;
   */
  values: string[] = [];

  /**
   * @generated from field: repeated SearchResultDictionaryProperty properties = 3;
   */
  properties: SearchResultDictionaryProperty[] = [];

  constructor(data?: PartialMessage<SearchResultDictionary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultDictionary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    {
      no: 3,
      name: "properties",
      kind: "message",
      T: SearchResultDictionaryProperty,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultDictionary {
    return new SearchResultDictionary().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDictionary {
    return new SearchResultDictionary().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDictionary {
    return new SearchResultDictionary().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultDictionary | PlainMessage<SearchResultDictionary> | undefined,
    b: SearchResultDictionary | PlainMessage<SearchResultDictionary> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultDictionary, a, b);
  }
}

/**
 * @generated from message SearchResultDictionaryProperty
 */
export class SearchResultDictionaryProperty extends Message<SearchResultDictionaryProperty> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated string values = 2;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<SearchResultDictionaryProperty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SearchResultDictionaryProperty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SearchResultDictionaryProperty {
    return new SearchResultDictionaryProperty().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDictionaryProperty {
    return new SearchResultDictionaryProperty().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SearchResultDictionaryProperty {
    return new SearchResultDictionaryProperty().fromJsonString(jsonString, options);
  }

  static equals(
    a: SearchResultDictionaryProperty | PlainMessage<SearchResultDictionaryProperty> | undefined,
    b: SearchResultDictionaryProperty | PlainMessage<SearchResultDictionaryProperty> | undefined,
  ): boolean {
    return proto3.util.equals(SearchResultDictionaryProperty, a, b);
  }
}

/**
 * @generated from message NinjaSearchResult
 */
export class NinjaSearchResult extends Message<NinjaSearchResult> {
  /**
   * @generated from field: SearchResult result = 1;
   */
  result?: SearchResult;

  constructor(data?: PartialMessage<NinjaSearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NinjaSearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: SearchResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NinjaSearchResult {
    return new NinjaSearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NinjaSearchResult {
    return new NinjaSearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NinjaSearchResult {
    return new NinjaSearchResult().fromJsonString(jsonString, options);
  }

  static equals(
    a: NinjaSearchResult | PlainMessage<NinjaSearchResult> | undefined,
    b: NinjaSearchResult | PlainMessage<NinjaSearchResult> | undefined,
  ): boolean {
    return proto3.util.equals(NinjaSearchResult, a, b);
  }
}
